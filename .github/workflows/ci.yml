name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Validate README
      run: |
        echo "Validating README.md structure..."
        if (!(Test-Path "README.md")) {
          Write-Error "README.md not found"
          exit 1
        }
        
        $content = Get-Content "README.md" -Raw
        if ($content -notmatch "XAMPP Virtual Host Setup") {
          Write-Error "README.md missing main title"
          exit 1
        }
        
        echo "‚úÖ README.md validation passed"
        
    - name: üîç Validate Examples
      run: |
        echo "Validating example files..."
        
        if (!(Test-Path "exemplos/httpd-vhosts.conf")) {
          Write-Error "httpd-vhosts.conf not found"
          exit 1
        }
        
        if (!(Test-Path "exemplos/httpd-vhosts-seguro.conf")) {
          Write-Error "httpd-vhosts-seguro.conf not found"
          exit 1
        }
        
        if (!(Test-Path "exemplos/hosts")) {
          Write-Error "hosts example not found"
          exit 1
        }
        
        echo "‚úÖ Example files validation passed"
        
    - name: üîç Validate Scripts
      run: |
        echo "Validating script files..."
        
        $scripts = @(
          "exemplos/scripts/criar-virtualhost.bat",
          "exemplos/scripts/criar-virtualhost-avancado.bat",
          "exemplos/scripts/listar-virtualhosts.bat",
          "exemplos/scripts/remover-virtualhost.bat",
          "exemplos/scripts/rollback.bat",
          "exemplos/scripts/validar-configuracao.bat"
        )
        
        foreach ($script in $scripts) {
          if (!(Test-Path $script)) {
            Write-Error "Script not found: $script"
            exit 1
          }
        }
        
        echo "‚úÖ Script files validation passed"
        
    - name: üîç Validate Documentation
      run: |
        echo "Validating documentation files..."
        
        $docs = @(
          "CONTRIBUTING.md",
          "LICENSE",
          "CHANGELOG.md",
          "ROADMAP.md"
        )
        
        foreach ($doc in $docs) {
          if (!(Test-Path $doc)) {
            Write-Error "Documentation not found: $doc"
            exit 1
          }
        }
        
        echo "‚úÖ Documentation validation passed"
        
    - name: üîç Check File Structure
      run: |
        echo "Checking project structure..."
        
        $expectedStructure = @(
          "README.md",
          "CONTRIBUTING.md",
          "LICENSE",
          "CHANGELOG.md",
          "ROADMAP.md",
          ".gitignore",
          "exemplos/",
          "exemplos/httpd-vhosts.conf",
          "exemplos/httpd-vhosts-seguro.conf",
          "exemplos/hosts",
          "exemplos/scripts/",
          "exemplos/scripts/README.md",
          ".github/",
          ".github/ISSUE_TEMPLATE/",
          ".github/workflows/"
        )
        
        foreach ($item in $expectedStructure) {
          if (!(Test-Path $item)) {
            Write-Error "Missing required file/folder: $item"
            exit 1
          }
        }
        
        echo "‚úÖ Project structure validation passed"
        
    - name: üìä Generate Report
      run: |
        echo "üìä Project Statistics:"
        echo "====================="
        
        $files = Get-ChildItem -Recurse -File | Where-Object { $_.Extension -match '\.(md|bat|conf)$' }
        $totalLines = 0
        
        foreach ($file in $files) {
          $lines = (Get-Content $file.FullName | Measure-Object -Line).Lines
          $totalLines += $lines
          echo "üìÑ $($file.Name): $lines lines"
        }
        
        echo "====================="
        echo "üìà Total files: $($files.Count)"
        echo "üìà Total lines: $totalLines"
        echo "====================="
        
    - name: üéâ Success
      run: |
        echo "üéâ All validations passed!"
        echo "‚úÖ Project is ready for release"
